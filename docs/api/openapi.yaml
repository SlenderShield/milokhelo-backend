openapi: 3.1.0
info:
  title: Milokhelo API
  version: "v1"
  description: >
    Milokhelo REST API v1 — sports match & tournament platform.
    Supports matches, tournaments, chat, venues (nearby search & booking), maps (mobile-submitted),
    calendar sync (device & third-party), notifications, invitations, feedback,
    teams, achievements, and OAuth authentication (Google & Facebook) with Passport.js
    using backend token exchange & session cookies.
servers:
  - url: https://api.milokhelo.com/v1
    description: Production
  - url: http://localhost:4000/v1
    description: Local development

tags:
  - name: Auth
    description: Authentication & session management (OAuth 2.0 with Google & Facebook)
  - name: Users
    description: User profiles, stats, achievements
  - name: Teams
    description: Team lifecycle management
  - name: Matches
    description: Match lifecycle and participant management
  - name: Tournaments
    description: Tournament lifecycle, brackets, registration
  - name: Chat
    description: Chat rooms and messages (WebSocket + REST)
  - name: Venues
    description: Venue discovery and booking (user)
  - name: Venue Management
    description: Venue owner/manager endpoints (CRUD, slots, bookings)
  - name: Maps
    description: Mobile-submitted map locations & map-based venue pins
  - name: Calendar
    description: Backend calendar canonical events and sync endpoints
  - name: Notifications
    description: Notification listing, device tokens, read tracking
  - name: Invitations
    description: Match/tournament invitations
  - name: Feedback
    description: User feedback & reports
  - name: Admin
    description: Admin-only endpoints (reports, moderation)

paths:
  ################################################################
  # AUTH / IAM (OAuth 2.0 with Google & Facebook + Email/Password) #
  ################################################################
  /auth/providers:
    get:
      tags: [Auth]
      summary: List supported OAuth providers
      description: Returns available OAuth providers (Google, Facebook) with their authorization URLs
      responses:
        "200":
          description: Providers metadata
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/OAuthProvider"
              example:
                - name: google
                  displayName: Google
                  authorizationUrl: /api/v1/auth/oauth/google
                - name: facebook
                  displayName: Facebook
                  authorizationUrl: /api/v1/auth/oauth/facebook

  /auth/oauth/google:
    get:
      tags: [Auth]
      summary: Initiate Google OAuth flow
      description: >
        Redirects user to Google OAuth consent screen. After user grants permission,
        Google redirects back to the callback URL with authorization code.
      responses:
        "302":
          description: Redirect to Google OAuth consent screen

  /auth/oauth/facebook:
    get:
      tags: [Auth]
      summary: Initiate Facebook OAuth flow
      description: >
        Redirects user to Facebook OAuth consent screen. After user grants permission,
        Facebook redirects back to the callback URL with authorization code.
      responses:
        "302":
          description: Redirect to Facebook OAuth consent screen

  /auth/oauth/callback/google:
    get:
      tags: [Auth]
      summary: Google OAuth callback
      description: >
        Google redirects here with authorization code. Backend exchanges code for tokens,
        creates/updates user account, and establishes session with HTTP-only cookie.
        Finally redirects to frontend with user data.
      parameters:
        - name: code
          in: query
          required: true
          schema: { type: string }
          description: Authorization code from Google
        - name: state
          in: query
          required: false
          schema: { type: string }
          description: CSRF protection state parameter
      responses:
        "302":
          description: Redirect to frontend with Set-Cookie header for session

  /auth/oauth/callback/facebook:
    get:
      tags: [Auth]
      summary: Facebook OAuth callback
      description: >
        Facebook redirects here with authorization code. Backend exchanges code for tokens,
        creates/updates user account, and establishes session with HTTP-only cookie.
        Finally redirects to frontend with user data.
      parameters:
        - name: code
          in: query
          required: true
          schema: { type: string }
          description: Authorization code from Facebook
        - name: state
          in: query
          required: false
          schema: { type: string }
          description: CSRF protection state parameter
      responses:
        "302":
          description: Redirect to frontend with Set-Cookie header for session

  /auth/session:
    get:
      tags: [Auth]
      summary: Validate/refresh session
      description: Get current user profile from active session
      security:
        - cookieAuth: []
      responses:
        "200":
          description: Session valid — user profile returned
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserProfile"
        "401":
          description: Session invalid/expired
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean, example: false }
                  message: { type: string, example: "No active session" }

  /auth/logout:
    post:
      tags: [Auth]
      summary: Log out user and clear session cookie
      description: Destroys user session and clears session cookie
      security:
        - cookieAuth: []
      responses:
        "204":
          description: Logged out successfully

  /auth/register:
    post:
      tags: [Auth]
      summary: Register using email/password
      description: >
        Create new account with email and password. OAuth authentication is preferred,
        but email/password registration is also supported.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RegisterUser"
      responses:
        "201":
          description: User created and session established
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserProfile"
        "400":
          description: Invalid input or user already exists

  /auth/login:
    post:
      tags: [Auth]
      summary: Login using email/password
      description: Authenticate with email and password, establishes session with HTTP-only cookie
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginUser"
      responses:
        "200":
          description: Session cookie set and profile returned
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserProfile"
        "401":
          description: Invalid credentials

  ################################################################
  # USERS                                                         #
  ################################################################
  /users/me:
    get:
      tags: [Users]
      summary: Get authenticated user profile
      security:
        - cookieAuth: []
      responses:
        "200":
          description: Current user
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserProfile"

  /users:
    get:
      tags: [Users]
      summary: Search/list users
      parameters:
        - name: q
          in: query
          schema: { type: string }
          description: Search (username, name, email)
        - name: sport
          in: query
          schema: { type: string }
      responses:
        "200":
          description: Array of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/UserProfile"
    post:
      tags: [Users]
      summary: Create or update a user profile (self or admin)
      security:
        - cookieAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserCreate"
      responses:
        "201":
          description: Profile created/updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserProfile"

  /users/{id}/stats:
    get:
      tags: [Users]
      summary: Get user statistics by sport
      description: >
        Returns comprehensive user statistics grouped by sport. Stats are automatically
        updated when matches finish via event-driven system. Includes performance metrics,
        ratings, streaks, and rankings.

        **Automatic Update System:**
        - Stats updated automatically when `POST /matches/{id}/finish` is called
        - Event-driven architecture with `match.finished` event
        - Supports both simple scores and detailed performance metrics
        - ELO ratings calculated: ±32 for competitive, ±16 for friendly matches
        - Winning/losing streaks tracked automatically
        - Per-sport stat tracking with multi-sport support
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string }
          description: User ID
      responses:
        "200":
          description: Array of user stats by sport
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/UserStat"
              example:
                - userId: "user123"
                  sport: "football"
                  matchesPlayed: 25
                  wins: 15
                  losses: 8
                  draws: 2
                  goalsScored: 42
                  assists: 18
                  fouls: 12
                  elo: 1250
                  streak: 3
                  rating: 4.5
                  level: 5
                  updatedAt: "2025-10-29T10:30:00Z"
                - userId: "user123"
                  sport: "basketball"
                  matchesPlayed: 15
                  wins: 10
                  losses: 5
                  draws: 0
                  goalsScored: 180
                  assists: 45
                  fouls: 8
                  elo: 1180
                  streak: -1
                  rating: 4.2
                  level: 4
                  updatedAt: "2025-10-28T15:45:00Z"
        "404":
          description: User not found

  /users/me/achievements:
    get:
      tags: [Users]
      summary: Get current user's achievements
      description: >
        Returns all achievements earned by the authenticated user. Achievements are
        automatically awarded when users meet specific criteria based on their stats
        (wins, streaks, ELO ratings, etc.). Supports multiple categories and rarity levels.
      security:
        - cookieAuth: []
      responses:
        "200":
          description: Array of user's earned achievements
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Achievement"
              example:
                - id: "ach_001"
                  name: "First Victory"
                  description: "Win your first match in any sport"
                  category: "milestone"
                  sport: "all"
                  rarity: "common"
                  points: 10
                  badgeUrl: "https://example.com/badges/first-victory.png"
                  createdAt: "2025-10-29T10:00:00Z"
                - id: "ach_015"
                  name: "On Fire"
                  description: "Win 3 matches in a row"
                  category: "skill"
                  sport: "all"
                  rarity: "common"
                  points: 30
                  badgeUrl: "https://example.com/badges/on-fire.png"
                  createdAt: "2025-10-29T10:00:00Z"
        "401":
          description: Not authenticated

  /users/{id}/achievements:
    get:
      tags: [Users]
      summary: Get achievements for any user
      description: >
        Returns all achievements earned by the specified user. Public endpoint to view
        other users' achievements.
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string }
          description: User ID
      responses:
        "200":
          description: Array of user's earned achievements
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Achievement"
        "404":
          description: User not found

  ################################################################
  # TEAMS                                                         #
  ################################################################
  /teams:
    post:
      tags: [Teams]
      summary: Create a team
      security:
        - cookieAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TeamCreate"
      responses:
        "201":
          description: Team created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Team"
    get:
      tags: [Teams]
      summary: List teams (filterable)
      parameters:
        - name: sport
          in: query
          schema: { type: string }
        - name: q
          in: query
          schema: { type: string }
      responses:
        "200":
          description: Array of teams
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Team"

  /teams/{id}:
    get:
      tags: [Teams]
      summary: Get team details
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string }
      responses:
        "200":
          description: Team object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Team"
    patch:
      tags: [Teams]
      summary: Update team (captain/manager)
      security:
        - cookieAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string }
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TeamUpdate"
      responses:
        "200":
          description: Team updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Team"
    delete:
      tags: [Teams]
      summary: Delete a team
      security:
        - cookieAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string }
      responses:
        "204":
          description: Team deleted

  /teams/{id}/join:
    post:
      tags: [Teams]
      summary: Request to join team
      security:
        - cookieAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string }
      responses:
        "200":
          description: Join request submitted or auto-joined based on team settings

  /teams/{id}/leave:
    post:
      tags: [Teams]
      summary: Leave team
      security:
        - cookieAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string }
      responses:
        "200":
          description: Left the team

  ################################################################
  # MATCHES                                                       #
  ################################################################
  /matches:
    post:
      tags: [Matches]
      summary: Create a match
      security:
        - cookieAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MatchCreate"
      responses:
        "201":
          description: Created match
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Match"
    get:
      tags: [Matches]
      summary: List matches (filterable)
      parameters:
        - name: sport
          in: query
          schema: { type: string }
        - name: city
          in: query
          schema: { type: string }
        - name: startAt
          in: query
          schema: { type: string, format: date-time }
      responses:
        "200":
          description: Matches array
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Match"

  /matches/{id}:
    get:
      tags: [Matches]
      summary: Get match details
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string }
      responses:
        "200":
          description: Match
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Match"
    patch:
      tags: [Matches]
      summary: Update match
      security:
        - cookieAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string }
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MatchUpdate"
      responses:
        "200":
          description: Updated match
    delete:
      tags: [Matches]
      summary: Cancel match
      security:
        - cookieAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string }
      responses:
        "204":
          description: Match cancelled

  /matches/{id}/join:
    post:
      tags: [Matches]
      summary: Join a match
      security:
        - cookieAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string }
      responses:
        "200":
          description: Joined match

  /matches/{id}/leave:
    post:
      tags: [Matches]
      summary: Leave a match
      security:
        - cookieAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string }
      responses:
        "200":
          description: Left match

  /matches/{id}/start:
    post:
      tags: [Matches]
      summary: Mark match as live
      security:
        - cookieAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string }
      responses:
        "200":
          description: Match live

  /matches/{id}/finish:
    post:
      tags: [Matches]
      summary: Finish match and automatically update participant stats
      description: >
        Marks match as finished with final scores. Automatically triggers stats updates
        for all participants including wins/losses/draws, ELO ratings, streaks, and
        detailed performance metrics (goals, assists, fouls). Stats are updated via
        event-driven architecture for reliability and scalability.

        **Event-Driven Auto-Update System:**
        - Publishes `match.finished` event to EventBus
        - StatsUpdateHandler subscribes and processes updates asynchronously
        - Parallel processing of all participants for performance
        - Atomic database updates with MongoDB $inc operator
        - Graceful error handling per participant
        - Multi-sport support with separate stat tracking
      security:
        - cookieAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string }
          description: Match ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MatchResult"
            examples:
              simpleScores:
                summary: Simple numeric scores
                value:
                  scores:
                    "user1_id": 5
                    "user2_id": 3
                    "user3_id": 4
              detailedScores:
                summary: Detailed performance stats
                value:
                  scores:
                    "user1_id":
                      goals: 3
                      assists: 2
                      fouls: 1
                    "user2_id":
                      goals: 1
                      assists: 0
                      fouls: 3
      responses:
        "200":
          description: >
            Match finished successfully. Stats for all participants have been
            automatically updated via event system. Updates include match outcome,
            ELO rating changes, streaks, and detailed performance metrics.
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean }
                  message: { type: string }
              example:
                success: true
                message: "Match finished, stats updated"
        "401":
          description: Unauthorized - must be match organizer
        "404":
          description: Match not found

  ################################################################
  # TOURNAMENTS                                                    #
  ################################################################
  /tournaments:
    post:
      tags: [Tournaments]
      summary: Create tournament
      security:
        - cookieAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TournamentCreate"
      responses:
        "201":
          description: Tournament created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Tournament"
    get:
      tags: [Tournaments]
      summary: List tournaments
      parameters:
        - name: sport
          in: query
          schema: { type: string }
        - name: type
          in: query
          schema:
            type: string
            enum: [knockout, league]
      responses:
        "200":
          description: Tournaments array
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Tournament"

  /tournaments/{id}:
    get:
      tags: [Tournaments]
      summary: Get tournament details
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string }
      responses:
        "200":
          description: Tournament
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Tournament"
    patch:
      tags: [Tournaments]
      summary: Update tournament
      security:
        - cookieAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string }
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TournamentUpdate"
      responses:
        "200":
          description: Tournament updated
    delete:
      tags: [Tournaments]
      summary: Cancel tournament
      security:
        - cookieAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string }
      responses:
        "204":
          description: Tournament cancelled

  /tournaments/{id}/register:
    post:
      tags: [Tournaments]
      summary: Register team/user
      security:
        - cookieAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string }
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TournamentRegister"
      responses:
        "200":
          description: Registered

  /tournaments/{id}/start:
    post:
      tags: [Tournaments]
      summary: Start tournament and generate bracket
      description: >
        Starts the tournament and automatically generates the bracket based on tournament type 
        (knockout or league) and registered teams. Validates minimum team requirements.
      security:
        - cookieAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string }
      responses:
        "200":
          description: Tournament started with generated bracket
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: { type: string }
                  bracket:
                    $ref: "#/components/schemas/TournamentBracket"
                  totalRounds: { type: integer }
                  currentRound: { type: integer }
        "400":
          description: Bad request (not enough teams, tournament already started, etc.)
        "401":
          description: Unauthorized (not tournament organizer)
        "404":
          description: Tournament not found

  /tournaments/{id}/bracket:
    get:
      tags: [Tournaments]
      summary: Get tournament bracket
      description: Retrieve the current bracket state with all rounds, matches, and standings
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string }
      responses:
        "200":
          description: Tournament bracket
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TournamentBracket"
        "404":
          description: Tournament or bracket not found

  /tournaments/{id}/match-result:
    post:
      tags: [Tournaments]
      summary: Update match result
      description: >
        Updates a match result in the tournament bracket. For knockout tournaments, 
        automatically advances the winner to the next round. For league tournaments,
        updates the standings table.
      security:
        - cookieAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MatchResultUpdate"
      responses:
        "200":
          description: Match result updated, returns updated bracket
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TournamentBracket"
        "400":
          description: Invalid match result
        "401":
          description: Unauthorized
        "404":
          description: Tournament or match not found

  ################################################################
  # CHAT                                                           #
  ################################################################
  /chat/rooms:
    get:
      tags: [Chat]
      summary: List user's chat rooms
      security:
        - cookieAuth: []
      responses:
        "200":
          description: Chat rooms
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ChatRoom"
    post:
      tags: [Chat]
      summary: Create chat room
      security:
        - cookieAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ChatRoomCreate"
      responses:
        "201":
          description: Chat room created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ChatRoom"

  /chat/rooms/{roomId}/messages:
    get:
      tags: [Chat]
      summary: Fetch messages
      security:
        - cookieAuth: []
      parameters:
        - name: roomId
          in: path
          required: true
          schema: { type: string }
        - name: limit
          in: query
          schema: { type: integer, default: 50 }
        - name: before
          in: query
          schema: { type: string, format: date-time }
      responses:
        "200":
          description: Messages array
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ChatMessage"
    post:
      tags: [Chat]
      summary: Send message
      security:
        - cookieAuth: []
      parameters:
        - name: roomId
          in: path
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ChatMessageCreate"
      responses:
        "201":
          description: Message saved

  /chat/messages/{messageId}:
    patch:
      tags: [Chat]
      summary: Edit message
      security:
        - cookieAuth: []
      parameters:
        - name: messageId
          in: path
          required: true
          schema: { type: string }
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                content:
                  type: string
      responses:
        "200":
          description: Message edited
    delete:
      tags: [Chat]
      summary: Delete (soft) message
      security:
        - cookieAuth: []
      parameters:
        - name: messageId
          in: path
          required: true
          schema: { type: string }
      responses:
        "204":
          description: Message deleted

  ################################################################
  # VENUES (USER-FACING)                                           #
  ################################################################
  /venues:
    get:
      tags: [Venues]
      summary: List approved/public venues
      parameters:
        - name: page
          in: query
          schema: { type: integer, default: 1 }
        - name: limit
          in: query
          schema: { type: integer, default: 20 }
      responses:
        "200":
          description: Venues array
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/VenueSummary"

  /venues/search:
    get:
      tags: [Venues]
      summary: Search venues by name, sport, city
      parameters:
        - name: q
          in: query
          schema: { type: string }
        - name: city
          in: query
          schema: { type: string }
        - name: sport
          in: query
          schema: { type: string }
      responses:
        "200":
          description: Search results
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/VenueSummary"

  /venues/nearby:
    get:
      tags: [Venues]
      summary: Find nearby venues by coordinates
      parameters:
        - name: lat
          in: query
          required: true
          schema: { type: number }
        - name: lng
          in: query
          required: true
          schema: { type: number }
        - name: radius
          in: query
          schema:
            type: number
            default: 10
        - name: sport
          in: query
          schema: { type: string }
        - name: available
          in: query
          schema: { type: boolean }
      responses:
        "200":
          description: Nearby venues
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/VenueSummary"

  /venues/{venueId}:
    get:
      tags: [Venues]
      summary: Get venue details
      parameters:
        - name: venueId
          in: path
          required: true
          schema: { type: string }
      responses:
        "200":
          description: Venue details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VenueDetail"

  /venues/{venueId}/availability:
    get:
      tags: [Venues]
      summary: Check venue availability on a date
      parameters:
        - name: venueId
          in: path
          required: true
          schema: { type: string }
        - name: date
          in: query
          required: true
          schema: { type: string, format: date }
      responses:
        "200":
          description: Slots availability
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/SlotAvailability"

  /venues/{venueId}/book:
    post:
      tags: [Venues]
      summary: Book a slot at venue
      security:
        - cookieAuth: []
      parameters:
        - name: venueId
          in: path
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BookingCreate"
      responses:
        "201":
          description: Booking created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Booking"

  ################################################################
  # VENUE MANAGEMENT (OWNER-FACING)                               #
  ################################################################
  /venue-management/venues:
    get:
      tags: [Venue Management]
      summary: List venues owned/managed by current user
      security:
        - cookieAuth: []
      responses:
        "200":
          description: Owned venues
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Venue"
    post:
      tags: [Venue Management]
      summary: Create a new venue (owner)
      security:
        - cookieAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/VenueCreate"
      responses:
        "201":
          description: Venue created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Venue"

  /venue-management/venues/{venueId}:
    get:
      tags: [Venue Management]
      summary: Get venue detail (owner)
      security:
        - cookieAuth: []
      parameters:
        - name: venueId
          in: path
          required: true
          schema: { type: string }
      responses:
        "200":
          description: Venue detail
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Venue"
    patch:
      tags: [Venue Management]
      summary: Update venue (owner)
      security:
        - cookieAuth: []
      parameters:
        - name: venueId
          in: path
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/VenueUpdate"
      responses:
        "200":
          description: Venue updated
    delete:
      tags: [Venue Management]
      summary: Delete or deactivate venue (owner)
      security:
        - cookieAuth: []
      parameters:
        - name: venueId
          in: path
          required: true
          schema: { type: string }
      responses:
        "204":
          description: Venue removed

  /venue-management/venues/{venueId}/slots:
    get:
      tags: [Venue Management]
      summary: Get all slots for a venue (owner)
      security:
        - cookieAuth: []
      parameters:
        - name: venueId
          in: path
          required: true
          schema: { type: string }
      responses:
        "200":
          description: Slots array
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/SlotAvailability"
    post:
      tags: [Venue Management]
      summary: Add or update bulk slots for venue
      security:
        - cookieAuth: []
      parameters:
        - name: venueId
          in: path
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/SlotAvailability"
      responses:
        "200":
          description: Slots saved

  /venue-management/venues/{venueId}/bookings:
    get:
      tags: [Venue Management]
      summary: List bookings for a venue (owner)
      security:
        - cookieAuth: []
      parameters:
        - name: venueId
          in: path
          required: true
          schema: { type: string }
        - name: date
          in: query
          schema: { type: string, format: date }
      responses:
        "200":
          description: Bookings array
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Booking"

  /venue-management/bookings/{bookingId}/approve:
    post:
      tags: [Venue Management]
      summary: Approve a booking
      security:
        - cookieAuth: []
      parameters:
        - name: bookingId
          in: path
          required: true
          schema: { type: string }
      responses:
        "200":
          description: Booking approved

  /venue-management/bookings/{bookingId}/reject:
    post:
      tags: [Venue Management]
      summary: Reject a booking
      security:
        - cookieAuth: []
      parameters:
        - name: bookingId
          in: path
          required: true
          schema: { type: string }
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                reason:
                  type: string
      responses:
        "200":
          description: Booking rejected

  ################################################################
  # MAPS                                                           #
  ################################################################
  /maps/nearby:
    get:
      tags: [Maps]
      summary: Fetch nearby venue pins for maps
      parameters:
        - name: lat
          in: query
          required: true
          schema: { type: number }
        - name: lng
          in: query
          required: true
          schema: { type: number }
        - name: radius
          in: query
          schema: { type: number, default: 5 }
      responses:
        "200":
          description: Venue pins
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/VenueMapData"

  /maps/submit:
    post:
      tags: [Maps]
      summary: Mobile submits chosen location for an entity (match/tournament)
      security:
        - cookieAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MapSubmission"
      responses:
        "201":
          description: Location saved
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Location"

  /maps/{entityType}/{entityId}:
    get:
      tags: [Maps]
      summary: Get stored location for a match or tournament
      parameters:
        - name: entityType
          in: path
          required: true
          schema:
            type: string
            enum: [match, tournament]
        - name: entityId
          in: path
          required: true
          schema: { type: string }
      responses:
        "200":
          description: Location returned
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Location"

  ################################################################
  # CALENDAR                                                       #
  ################################################################
  /calendar/events:
    get:
      tags: [Calendar]
      summary: Fetch backend events for user (for device sync)
      security:
        - cookieAuth: []
      responses:
        "200":
          description: Events array
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Event"
    post:
      tags: [Calendar]
      summary: Create or update an event from device (sync)
      security:
        - cookieAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EventSync"
      responses:
        "201":
          description: Event created/updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Event"

  /calendar/sync:
    post:
      tags: [Calendar]
      summary: Sync device events with backend (merge)
      security:
        - cookieAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                deviceEvents:
                  type: array
                  items:
                    $ref: "#/components/schemas/Event"
      responses:
        "200":
          description: Sync result
          content:
            application/json:
              schema:
                type: object
                properties:
                  syncedEvents:
                    type: array
                    items:
                      $ref: "#/components/schemas/Event"

  ################################################################
  # NOTIFICATIONS                                                  #
  ################################################################
  /notifications:
    get:
      tags: [Notifications]
      summary: List notifications
      security:
        - cookieAuth: []
      parameters:
        - name: limit
          in: query
          schema: { type: integer, default: 50 }
        - name: skip
          in: query
          schema: { type: integer, default: 0 }
      responses:
        "200":
          description: Notifications
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Notification"

  /notifications/{id}/read:
    patch:
      tags: [Notifications]
      summary: Mark notification read
      security:
        - cookieAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string }
      responses:
        "200":
          description: Marked read

  /notifications/push-token:
    post:
      tags: [Notifications]
      summary: Register device push token
      security:
        - cookieAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                token: { type: string }
                platform:
                  type: string
                  enum: [ios, android]
      responses:
        "201":
          description: Token registered

  ################################################################
  # INVITATIONS                                                    #
  ################################################################
  /invitations:
    post:
      tags: [Invitations]
      summary: Send invitation (match/tournament/team)
      security:
        - cookieAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/InvitationCreate"
      responses:
        "201":
          description: Invitation created
    get:
      tags: [Invitations]
      summary: List invitations for current user
      security:
        - cookieAuth: []
      responses:
        "200":
          description: Invitations
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Invitation"

  /invitations/{id}/respond:
    post:
      tags: [Invitations]
      summary: Respond to invitation (accept/decline)
      security:
        - cookieAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                action:
                  type: string
                  enum: [accept, decline]
      responses:
        "200":
          description: Response recorded

  ################################################################
  # FEEDBACK / REPORTS                                              #
  ################################################################
  /feedback:
    post:
      tags: [Feedback]
      summary: Submit feedback or report
      security:
        - cookieAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FeedbackCreate"
      responses:
        "201":
          description: Feedback submitted
    get:
      tags: [Feedback]
      summary: List feedback (admin)
      security:
        - cookieAuth: []
      responses:
        "200":
          description: Feedback list
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Feedback"

  ################################################################
  # ADMIN                                                           #
  ################################################################
  /admin/reports:
    get:
      tags: [Admin]
      summary: List system reports & moderation items (admin only)
      security:
        - cookieAuth: []
      responses:
        "200":
          description: Reports array
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object

components:
  securitySchemes:
    cookieAuth:
      type: apiKey
      in: cookie
      name: session
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
    oauth2_google:
      type: oauth2
      flows:
        authorizationCode:
          authorizationUrl: https://accounts.google.com/o/oauth2/v2/auth
          tokenUrl: https://oauth2.googleapis.com/token
          scopes:
            profile: Access basic profile
            email: Access email address
    oauth2_facebook:
      type: oauth2
      flows:
        authorizationCode:
          authorizationUrl: https://www.facebook.com/v11.0/dialog/oauth
          tokenUrl: https://graph.facebook.com/v11.0/oauth/access_token
          scopes:
            public_profile: Access public profile
            email: Access email address

  schemas:
    #########################################################
    # AUTH / USER SCHEMAS                                   #
    #########################################################
    OAuthProvider:
      type: object
      properties:
        name:
          type: string
          example: google
          description: Provider identifier (google, facebook)
        displayName:
          type: string
          example: Google
          description: Human-readable provider name
        authorizationUrl:
          type: string
          format: uri
          example: /api/v1/auth/oauth/google
          description: URL to initiate OAuth flow

    RegisterUser:
      type: object
      required: [name, email, password]
      properties:
        name: { type: string }
        email: { type: string, format: email }
        password: { type: string, minLength: 6 }

    LoginUser:
      type: object
      required: [email, password]
      properties:
        email: { type: string, format: email }
        password: { type: string }

    UserCreate:
      type: object
      properties:
        username: { type: string }
        name: { type: string }
        email: { type: string, format: email }
        phone: { type: string }
        bio: { type: string }
        sportsPreferences:
          type: array
          items: { type: string }

    UserProfile:
      type: object
      properties:
        id: { type: string }
        username: { type: string }
        name: { type: string }
        email: { type: string, format: email }
        avatar: { type: string, format: uri }
        phone: { type: string }
        roles:
          type: array
          items: { type: string }
        verified:
          type: boolean
          description: True if user verified email or authenticated via OAuth
        privacy:
          type: object
          properties:
            showPhone: { type: boolean }
            showStats: { type: boolean }
            showLocation: { type: boolean }
        sportsPreferences:
          type: array
          items: { type: string }
        location:
          type: object
          properties:
            city: { type: string }
            coordinates:
              type: object
              properties:
                lat: { type: number }
                lng: { type: number }
        oauthProviders:
          type: object
          description: Linked OAuth providers (not including sensitive data)
          properties:
            google:
              type: object
              properties:
                id: { type: string }
                email: { type: string }
            facebook:
              type: object
              properties:
                id: { type: string }
                email: { type: string }
        createdAt: { type: string, format: date-time }
        updatedAt: { type: string, format: date-time }
        lastLogin: { type: string, format: date-time }
        achievements:
          type: array
          items: { type: string }
        stats:
          type: array
          items: { type: string }

    #########################################################
    # TEAM SCHEMAS                                          #
    #########################################################
    TeamCreate:
      type: object
      required: [name]
      properties:
        name: { type: string }
        sport: { type: string }
        description: { type: string }
        joinCode: { type: string }

    TeamUpdate:
      type: object
      properties:
        name: { type: string }
        description: { type: string }
        joinCode: { type: string }

    Team:
      type: object
      properties:
        id: { type: string }
        name: { type: string }
        sport: { type: string }
        description: { type: string }
        members:
          type: array
          items: { type: string }
        captainId: { type: string }
        stats:
          type: object
          properties:
            matchesPlayed: { type: integer }
            wins: { type: integer }
            losses: { type: integer }
            rating: { type: number }
        createdAt: { type: string, format: date-time }
        updatedAt: { type: string, format: date-time }

    #########################################################
    # MATCH / TOURNAMENT SCHEMAS                            #
    #########################################################
    Location:
      type: object
      properties:
        venue: { type: string }
        address: { type: string }
        lat: { type: number }
        lng: { type: number }
        geo:
          type: object
          properties:
            type:
              type: string
              enum: [Point]
            coordinates:
              type: array
              items:
                type: number
              description: string

    MatchCreate:
      type: object
      required: [title, sport, startAt, location]
      properties:
        title: { type: string }
        sport: { type: string }
        type:
          type: string
          enum: [friendly, competitive]
        sportCategory: { type: string }
        startAt: { type: string, format: date-time }
        endAt: { type: string, format: date-time }
        location:
          $ref: "#/components/schemas/Location"
        maxPlayers: { type: integer }
        skillLevel:
          type: string
          enum: [beginner, intermediate, advanced]
        entryFee: { type: number }
        prize: { type: string }
        teamBased: { type: boolean }
        visibility:
          type: string
          enum: [public, private]

    MatchUpdate:
      type: object
      properties:
        title: { type: string }
        startAt: { type: string, format: date-time }
        endAt: { type: string, format: date-time }
        location:
          $ref: "#/components/schemas/Location"
        maxPlayers: { type: integer }
        status:
          type: string
          enum: [scheduled, live, finished, cancelled]
        cancelReason: { type: string }

    MatchResult:
      type: object
      required: [scores]
      properties:
        scores:
          type: object
          description: >
            Match scores by participant ID. Can be simple numeric scores or detailed
            objects with performance metrics. Stats auto-update system processes both formats.
          additionalProperties:
            oneOf:
              - type: integer
                description: Simple numeric score
              - type: object
                description: Detailed performance stats
                properties:
                  goals: { type: integer, description: Goals/points scored }
                  assists: { type: integer, description: Assists }
                  fouls: { type: integer, description: Fouls committed }
          example:
            "user1_id": 5
            "user2_id":
              goals: 3
              assists: 2
              fouls: 1

    Match:
      allOf:
        - $ref: "#/components/schemas/MatchCreate"
        - type: object
          properties:
            id: { type: string }
            organizerId: { type: string }
            participants:
              type: array
              items: { type: string }
            status:
              type: string
              enum: [scheduled, live, finished, cancelled]
            chatRoomId: { type: string }
            createdAt: { type: string, format: date-time }
            updatedAt: { type: string, format: date-time }

    TournamentCreate:
      type: object
      required: [title, sport, type, registrationWindow]
      properties:
        title: { type: string }
        sport: { type: string }
        sportCategory: { type: string }
        type:
          type: string
          enum: [knockout, league]
        rules: { type: string }
        registrationWindow:
          type: object
          required: [start, end]
          properties:
            start: { type: string, format: date-time }
            end: { type: string, format: date-time }
        entryFee: { type: number }
        prizePool: { type: string }
        minTeams: { type: integer }
        maxTeams: { type: integer }
        visibility:
          type: string
          enum: [public, private]

    TournamentUpdate:
      type: object
      properties:
        rules: { type: string }
        entryFee: { type: number }
        prizePool: { type: string }
        visibility:
          type: string
          enum: [public, private]
        status:
          type: string
          enum: [registration, ongoing, completed, cancelled]
        currentRound: { type: integer }

    TournamentRegister:
      type: object
      required: [teamId]
      properties:
        teamId: { type: string }

    Tournament:
      allOf:
        - $ref: "#/components/schemas/TournamentCreate"
        - type: object
          properties:
            id: { type: string }
            organizerId: { type: string }
            teams:
              type: array
              items: { type: string }
            matches:
              type: array
              items: { type: string }
            rounds: { type: integer }
            currentRound: { type: integer }
            bracket:
              $ref: "#/components/schemas/TournamentBracket"
            status:
              type: string
              enum: [registration, ongoing, completed, cancelled]
            chatRoomId: { type: string }
            createdAt: { type: string, format: date-time }
            updatedAt: { type: string, format: date-time }

    TournamentBracket:
      oneOf:
        - $ref: "#/components/schemas/KnockoutBracket"
        - $ref: "#/components/schemas/LeagueBracket"

    KnockoutBracket:
      type: object
      description: Single-elimination knockout tournament bracket
      properties:
        type:
          type: string
          enum: [knockout]
        totalRounds:
          type: integer
          description: Total number of rounds in the tournament
        currentRound:
          type: integer
          description: Current active round
        rounds:
          type: array
          items:
            $ref: "#/components/schemas/KnockoutRound"
        teams:
          type: array
          items:
            type: object
            properties:
              teamId: { type: string }
              seed:
                type: integer
                description: Team seeding (1-N)
              eliminated:
                type: boolean
                description: Whether team has been eliminated
        winners:
          type: object
          properties:
            champion:
              type: string
              nullable: true
              description: Tournament champion team ID
            runnerUp:
              type: string
              nullable: true
              description: Runner-up team ID
            thirdPlace:
              type: string
              nullable: true
              description: Third place team ID

    KnockoutRound:
      type: object
      properties:
        roundNumber: { type: integer }
        name:
          type: string
          description: Human-readable round name (Final, Semi-Final, etc.)
        matches:
          type: array
          items:
            $ref: "#/components/schemas/KnockoutMatch"
        completed:
          type: boolean
          description: Whether all matches in this round are completed

    KnockoutMatch:
      type: object
      properties:
        matchNumber:
          type: integer
          description: Unique match number in tournament
        round: { type: integer }
        team1:
          type: string
          nullable: true
          description: First team ID (null if awaiting previous round)
        team2:
          type: string
          nullable: true
          description: Second team ID (null if awaiting previous round)
        winner:
          type: string
          nullable: true
          description: Winner team ID
        score:
          type: object
          properties:
            team1:
              type: integer
              nullable: true
            team2:
              type: integer
              nullable: true
        status:
          type: string
          enum: [pending, completed, bye]
          description: Match status (bye = team advanced automatically)
        startTime:
          type: string
          format: date-time
          nullable: true
        nextMatch:
          type: integer
          nullable: true
          description: Match number in next round for winner
        nextMatchPosition:
          type: string
          enum: [team1, team2]
          nullable: true
          description: Position (team1 or team2) in next match

    LeagueBracket:
      type: object
      description: Round-robin league tournament bracket
      properties:
        type:
          type: string
          enum: [league]
        totalRounds:
          type: integer
          description: Total number of rounds (each team plays every other once)
        currentRound:
          type: integer
          description: Current active round
        rounds:
          type: array
          items:
            $ref: "#/components/schemas/LeagueRound"
        standings:
          type: array
          items:
            $ref: "#/components/schemas/LeagueStanding"

    LeagueRound:
      type: object
      properties:
        roundNumber: { type: integer }
        name:
          type: string
          description: Round name (e.g., "Round 1")
        matches:
          type: array
          items:
            $ref: "#/components/schemas/LeagueMatch"
        completed:
          type: boolean
          description: Whether all matches in this round are completed

    LeagueMatch:
      type: object
      properties:
        matchNumber:
          type: integer
          description: Unique match number in tournament
        round: { type: integer }
        team1: { type: string }
        team2: { type: string }
        score:
          type: object
          properties:
            team1:
              type: integer
              nullable: true
            team2:
              type: integer
              nullable: true
        status:
          type: string
          enum: [pending, completed]
        startTime:
          type: string
          format: date-time
          nullable: true
        played:
          type: boolean
          description: Whether the match has been played

    LeagueStanding:
      type: object
      description: Team standing in league table
      properties:
        teamId: { type: string }
        position:
          type: integer
          description: Current position in table
        played:
          type: integer
          description: Matches played
        won:
          type: integer
          description: Matches won
        drawn:
          type: integer
          description: Matches drawn
        lost:
          type: integer
          description: Matches lost
        goalsFor:
          type: integer
          description: Goals scored
        goalsAgainst:
          type: integer
          description: Goals conceded
        goalDifference:
          type: integer
          description: Goal difference (GF - GA)
        points:
          type: integer
          description: Total points (3 for win, 1 for draw)

    MatchResultUpdate:
      type: object
      required: [matchNumber, result]
      properties:
        matchNumber:
          type: integer
          description: Match number in the bracket
        result:
          type: object
          required: [score]
          properties:
            winner:
              type: string
              description: Winner team ID (required for knockout, optional for league)
            score:
              type: object
              required: [team1, team2]
              properties:
                team1:
                  type: integer
                  minimum: 0
                team2:
                  type: integer
                  minimum: 0

    #########################################################
    # CHAT SCHEMAS                                           #
    #########################################################
    ChatRoomCreate:
      type: object
      properties:
        name: { type: string }
        type:
          type: string
          enum: [match, tournament, team, dm, group]
        participants:
          type: array
          items: { type: string }

    ChatRoom:
      type: object
      properties:
        id: { type: string }
        name: { type: string }
        type:
          type: string
          enum: [match, tournament, team, dm, group]
        participants:
          type: array
          items: { type: string }
        lastMessage: { type: string }
        mutedBy:
          type: array
          items: { type: string }
        isArchived: { type: boolean }
        presence:
          type: array
          items:
            type: object
            properties:
              userId: { type: string }
              status:
                type: string
                enum: [online, offline, typing]
        createdAt: { type: string, format: date-time }
        updatedAt: { type: string, format: date-time }

    ChatMessageCreate:
      type: object
      required: [content]
      properties:
        content: { type: string }
        messageType:
          type: string
          enum: [text, image, video, system]
        attachments:
          type: array
          items: { type: string }
        replyTo: { type: string }

    ChatMessage:
      allOf:
        - $ref: "#/components/schemas/ChatMessageCreate"
        - type: object
          properties:
            id: { type: string }
            roomId: { type: string }
            senderId: { type: string }
            reactions:
              type: array
              items:
                type: object
                properties:
                  userId: { type: string }
                  emoji: { type: string }
            deleted: { type: boolean }
            createdAt: { type: string, format: date-time }
            editedAt: { type: string, format: date-time }

    #########################################################
    # VENUE / MAP SCHEMAS                                    #
    #########################################################
    VenueSummary:
      type: object
      properties:
        id: { type: string }
        name: { type: string }
        address: { type: string }
        city: { type: string }
        sportsSupported:
          type: array
          items: { type: string }
        rating:
          type: number
          minimum: 0
          maximum: 5
        distance:
          type: number
          description: Distance in kilometers
        location:
          $ref: "#/components/schemas/GeoLocation"
        isAvailable: { type: boolean }

    VenueMapData:
      type: object
      properties:
        id: { type: string }
        name: { type: string }
        coordinates:
          type: array
          items: { type: number }
          description: string
        address: { type: string }
        sportTypes:
          type: array
          items: { type: string }
        isAvailable: { type: boolean }

    VenueDetail:
      allOf:
        - $ref: "#/components/schemas/VenueSummary"
        - type: object
          properties:
            ownerId: { type: string }
            slots:
              type: array
              items:
                type: object
                properties:
                  startAt: { type: string, format: date-time }
                  endAt: { type: string, format: date-time }
                  price: { type: number }
                  isBooked: { type: boolean }
            amenities:
              type: array
              items: { type: string }
            contact:
              type: object
              properties:
                phone: { type: string }
                email: { type: string }

    Venue:
      allOf:
        - $ref: "#/components/schemas/VenueDetail"
        - type: object
          properties:
            createdAt: { type: string, format: date-time }
            updatedAt: { type: string, format: date-time }
            verified: { type: boolean }
            status:
              type: string
              enum: [active, inactive, pending, banned]

    VenueCreate:
      type: object
      required: [name, address, city, sportsSupported, location]
      properties:
        name: { type: string }
        description: { type: string }
        address: { type: string }
        city: { type: string }
        sportsSupported:
          type: array
          items: { type: string }
        contact:
          type: object
          properties:
            phone: { type: string }
            email: { type: string }
        location:
          $ref: "#/components/schemas/GeoLocation"
        images:
          type: array
          items: { type: string }

    VenueUpdate:
      type: object
      properties:
        name: { type: string }
        description: { type: string }
        address: { type: string }
        city: { type: string }
        sportsSupported:
          type: array
          items: { type: string }
        verified: { type: boolean }
        status:
          type: string
          enum: [active, inactive]

    GeoLocation:
      type: object
      properties:
        type:
          type: string
          enum: [Point]
        coordinates:
          type: array
          items: { type: number }
          description: string

    MapSubmission:
      type: object
      required: [entityType, entityId, name, lat, lng]
      properties:
        entityType:
          type: string
          enum: [match, tournament]
        entityId: { type: string }
        name: { type: string }
        lat: { type: number }
        lng: { type: number }
        address: { type: string }

    #########################################################
    # VENUE BOOKING SCHEMAS                                 #
    #########################################################
    SlotAvailability:
      type: object
      properties:
        date:
          type: string
          format: date
        startTime:
          type: string
        endTime:
          type: string
        available: { type: boolean }
        price: { type: number }

    BookingCreate:
      type: object
      required: [date, startTime, endTime, sport]
      properties:
        date: { type: string, format: date }
        startTime: { type: string }
        endTime: { type: string }
        sport: { type: string }
        teamSize: { type: integer }
        notes: { type: string }

    Booking:
      type: object
      properties:
        id: { type: string }
        venueId: { type: string }
        userId: { type: string }
        date: { type: string, format: date }
        startTime: { type: string }
        endTime: { type: string }
        sport: { type: string }
        teamSize: { type: integer }
        totalPrice: { type: number }
        status:
          type: string
          enum: [pending, confirmed, cancelled]
        createdAt: { type: string, format: date-time }
        updatedAt: { type: string, format: date-time }

    #########################################################
    # CALENDAR / EVENT SCHEMAS                              #
    #########################################################
    EventCreate:
      type: object
      required: [title, date]
      properties:
        title: { type: string }
        date: { type: string, format: date-time }
        relatedTo:
          type: object
          properties:
            type:
              type: string
              enum: [match, tournament, booking]
            id: { type: string }

    EventSync:
      type: object
      required: [title, date, relatedTo]
      properties:
        title: { type: string }
        date: { type: string, format: date-time }
        relatedTo:
          type: object
          properties:
            type:
              type: string
              enum: [match, tournament, booking]
            id: { type: string }
        syncedWithMobile: { type: boolean }

    Event:
      allOf:
        - $ref: "#/components/schemas/EventCreate"
        - type: object
          properties:
            id: { type: string }
            createdAt: { type: string, format: date-time }
            updatedAt: { type: string, format: date-time }

    #########################################################
    # NOTIFICATIONS / INVITATIONS / FEEDBACK                 #
    #########################################################
    Notification:
      type: object
      properties:
        id: { type: string }
        userId: { type: string }
        type: { type: string }
        category:
          type: string
          enum: [match, tournament, booking, system, social]
        payload: { type: object }
        priority:
          type: string
          enum: [low, medium, high]
        actionType: { type: string }
        actionUrl: { type: string, format: uri }
        delivered: { type: boolean }
        readAt: { type: string, format: date-time }
        createdAt: { type: string, format: date-time }
        expiresAt: { type: string, format: date-time }

    InvitationCreate:
      type: object
      required: [recipientId, type, entityId]
      properties:
        recipientId: { type: string }
        type:
          type: string
          enum: [match, tournament, team]
        entityId: { type: string }
        message: { type: string }

    Invitation:
      allOf:
        - $ref: "#/components/schemas/InvitationCreate"
        - type: object
          properties:
            id: { type: string }
            senderId: { type: string }
            status:
              type: string
              enum: [pending, accepted, declined]
            createdAt: { type: string, format: date-time }
            expiresAt: { type: string, format: date-time }

    FeedbackCreate:
      type: object
      required: [type, message]
      properties:
        type:
          type: string
          enum: [bug, suggestion, report]
        message: { type: string }
        relatedTo:
          type: object
          properties:
            type:
              type: string
              enum: [match, tournament, venue, user]
            id: { type: string }

    Feedback:
      allOf:
        - $ref: "#/components/schemas/FeedbackCreate"
        - type: object
          properties:
            id: { type: string }
            userId: { type: string }
            createdAt: { type: string, format: date-time }

    #########################################################
    # STATS / ACHIEVEMENTS                                  #
    #########################################################
    UserStat:
      type: object
      description: >
        User performance statistics per sport. Automatically updated when matches finish
        via event-driven stats update system. Tracks match outcomes, ratings, and detailed
        performance metrics.
      required: [userId, sport]
      properties:
        userId:
          type: string
          description: Reference to user
        teamId:
          type: string
          description: Optional team reference for team-specific stats
        sport:
          type: string
          description: Sport category (e.g., football, basketball, tennis)
        matchesPlayed:
          type: integer
          default: 0
          description: Total matches played
        wins:
          type: integer
          default: 0
          description: Number of wins
        losses:
          type: integer
          default: 0
          description: Number of losses
        draws:
          type: integer
          default: 0
          description: Number of draws
        goalsScored:
          type: integer
          default: 0
          description: Total goals/points scored
        assists:
          type: integer
          default: 0
          description: Total assists
        fouls:
          type: integer
          default: 0
          description: Total fouls committed
        rating:
          type: number
          default: 0
          description: Average user rating from community feedback
        elo:
          type: number
          default: 1000
          description: >
            ELO rating calculated from match results. Competitive matches: ±32 points,
            Friendly matches: ±16 points per win/loss. Base rating is 1000.
        streak:
          type: integer
          default: 0
          description: >
            Current win/loss streak. Positive values indicate winning streak,
            negative values indicate losing streak. Draws maintain streak.
        rank:
          type: integer
          description: User rank within sport category (optional)
        level:
          type: integer
          default: 1
          description: User level based on experience (optional)
        createdAt:
          type: string
          format: date-time
          description: When stats record was created
        updatedAt:
          type: string
          format: date-time
          description: Last stats update timestamp (automatically set on match finish)

    Achievement:
      type: object
      description: >
        Achievement earned by users for meeting specific criteria. Achievements are
        automatically evaluated when user stats update via event-driven system.
      required: [name, category, criteria, rarity, points]
      properties:
        id:
          type: string
          description: Unique achievement identifier
        name:
          type: string
          description: Achievement name (unique)
        description:
          type: string
          description: Description of what the achievement represents
        category:
          type: string
          enum: [milestone, skill, participation, social, special]
          description: >
            Achievement category:
            - milestone: Progress-based (matches played, experience)
            - skill: Performance-based (wins, win rate, streaks, ELO)
            - participation: Activity-based (goals, assists)
            - social: Team/community achievements
            - special: Unique accomplishments
        sport:
          type: string
          default: all
          description: >
            Sport this achievement applies to. Use 'all' for cross-sport achievements.
        criteria:
          type: object
          description: >
            Flexible criteria object defining achievement requirements.
            Supports types: stat_threshold, stat_total, ratio, streak, composite.
            See docs/ACHIEVEMENTS.md for detailed criteria format.
          additionalProperties: true
          example:
            type: stat_threshold
            field: wins
            operator: ">="
            value: 10
        badgeUrl:
          type: string
          format: uri
          description: URL to achievement badge image
        rarity:
          type: string
          enum: [common, rare, epic, legendary]
          description: >
            Achievement rarity level indicating difficulty:
            - common: Easy to achieve (10-30 points)
            - rare: Moderate difficulty (50-100 points)
            - epic: Challenging (150-250 points)
            - legendary: Extremely difficult (500-1000 points)
        points:
          type: integer
          minimum: 0
          description: Points awarded when achievement is earned
        isActive:
          type: boolean
          default: true
          description: Whether this achievement is currently active and can be earned
        createdAt:
          type: string
          format: date-time
          description: When achievement was created
        updatedAt:
          type: string
          format: date-time
          description: Last update timestamp

security:
  - cookieAuth: []

externalDocs:
  description: Implementation notes & examples
  url: https://github.com/your-org/milokhelo
